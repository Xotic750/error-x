{"version":3,"sources":["../src/error-x.js"],"names":[],"mappings":"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","file":"error-x.esm.js","sourcesContent":["/*\n * Want to create your own Error objects, this module will allow you to do\n * just that. It ships with all the standard Error objects already created\n * for you. Why? Well, these offer some improvements over the native versions.\n * - They have a `toJSON` method and so they can be serialised.\n * - They have a standardised `stack` property, using\n * [`error-stack-parser`](https://github.com/stacktracejs/error-stack-parser)\n * messages and stacks are parsed and then re-formatted.\n * - They have a `frames` property which is an array of the parsed `stack`\n * message, so you have easy access to the information.\n */\n\nimport hasToStringTag from 'has-to-string-tag-x';\nimport trim from 'trim-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport StackFrame from 'stackframe';\nimport errorStackParser from 'error-stack-parser';\nimport defineProperty from 'object-define-property-x';\nimport defineProperties from 'object-define-properties-x';\nimport findIndex from 'find-index-x';\nimport isFunction from 'is-function-x';\nimport inspect from 'inspect-x';\nimport truncate from 'truncate-x';\nimport $isError from 'is-error-x';\nimport isNil from 'is-nil-x';\nimport toLength from 'to-length-x';\nimport $create from 'object-create-x';\nimport isObjectLike from 'is-object-like-x';\nimport map from 'array-map-x';\nimport numberIsNaN from 'is-nan-x';\nimport numberIsFinite from 'is-finite-x';\n\nexport const isError = $isError;\n\n/**\n * @typedef {ErrorConstructor|TypeErrorConstructor|SyntaxErrorConstructor|URIErrorConstructor|ReferenceErrorConstructor|EvalErrorConstructor|RangeErrorConstructor} OfErrorConstructor\n */\n\n/** @type {BooleanConstructor} */\nconst castBoolean = true.constructor;\n/* eslint-disable-next-line compat/compat */\nconst $toStringTag = hasToStringTag && Symbol.toStringTag;\n\n/** @type {ErrorConstructor} */\nconst $Error = Error;\nconst cV8 =\n  $Error.captureStackTrace &&\n  (function _cV8() {\n    // Capture the function (if any).\n    const {captureStackTrace} = $Error;\n    // Test to see if the function works.\n    try {\n      captureStackTrace(new $Error(), captureStackTrace);\n    } catch (ignore) {\n      return false;\n    }\n\n    /**\n     * The stack preparation function for the V8 stack.\n     *\n     * @private\n     * @param {*} ignore - Unused argument.\n     * @param {!object} thisStack - The V8 stack.\n     * @returns {!object} The V8 stack.\n     */\n    const prepareStackTrace = function _prepareStackTrace(ignore, thisStack) {\n      return thisStack;\n    };\n\n    /**\n     * Tests for number as specified in StackTrace library.\n     *\n     * @private\n     * @param {*} n - The value to test.\n     * @returns {boolean} True if parsable, otherwise false.\n     */\n    const isNumber = function _isNumber(n) {\n      return numberIsNaN(parseFloat(n)) === false && numberIsFinite(n);\n    };\n\n    /**\n     * Captures the V8 stack and converts it to an array of Stackframes.\n     *\n     * @private\n     * @function captureV8\n     * @param {!object} context - The Custom Error this object.\n     * @returns {!Array.<!object>} Array of StackFrames.\n     */\n    return function captureV8(context) {\n      const temp = $Error.prepareStackTrace;\n      $Error.prepareStackTrace = prepareStackTrace;\n      /** @type {object} */\n      const error = new $Error();\n      captureStackTrace(error, context.constructor);\n      const frames = map(error.stack, function _mapper(frame) {\n        const opts = {\n          // args: void 0,\n          functionName: frame.getFunctionName(),\n          isConstructor: frame.isConstructor(),\n          isEval: frame.isEval(),\n          isNative: frame.isNative(),\n          isToplevel: frame.isToplevel(),\n          source: frame.toString(),\n        };\n\n        const getFileName = isFunction(frame.getFileName) && frame.getFileName();\n\n        if (getFileName) {\n          opts.getFileName = getFileName;\n        }\n\n        const columnNumber = isFunction(frame.getColumnNumber) && frame.getColumnNumber();\n\n        if (isNumber(columnNumber)) {\n          opts.columnNumber = columnNumber;\n        }\n\n        const lineNumber = isFunction(frame.getLineNumber) && frame.getLineNumber();\n\n        if (isNumber(lineNumber)) {\n          opts.lineNumber = lineNumber;\n        }\n\n        const evalOrigin = isFunction(frame.getEvalOrigin) && frame.getEvalOrigin();\n\n        if (isObjectLike(evalOrigin)) {\n          opts.evalOrigin = evalOrigin;\n        }\n\n        return new StackFrame(opts);\n      });\n\n      if (typeof temp === 'undefined') {\n        delete $Error.prepareStackTrace;\n      } else {\n        $Error.prepareStackTrace = temp;\n      }\n\n      return frames;\n    };\n  })();\n\nlet allCtrs = true;\n\n/**\n * Defines frames and stack on the Custom Error this object.\n *\n * @private\n * @param {!object} context - The Custom Error this object.\n * @param {!Array.<!object>} frames - Array of StackFrames.\n * @param {string} name - The name of the constructor.\n */\nconst defContext = function _defContext(context, frames, name) {\n  defineProperties(context, {\n    frames: {\n      value: frames,\n    },\n    stack: {\n      value: `${name}\\n    ${map(frames, (frame) => {\n        return frame.toString();\n      }).join('\\n    ')}`,\n    },\n  });\n};\n\n/**\n * Captures the other stacks and converts them to an array of Stackframes.\n *\n * @private\n * @param {!object} context - The Custom Error this object.\n * @param {!Error} err - The Error object to be parsed.\n * @param {string} name - The name of the constructor.\n * @returns {boolean} True if the Error object was parsed, otherwise false.\n */\nconst errParse = function _errParse(context, err, name) {\n  let frames;\n  try {\n    frames = errorStackParser.parse(err);\n  } catch (ignore) {\n    return false;\n  }\n\n  const start = findIndex(frames, function _finderStart(frame) {\n    const fName = typeof frame.functionName === 'string' ? frame.functionName : '';\n\n    return fName.indexOf(name) > -1;\n  });\n\n  if (start > -1) {\n    const item = frames[start];\n    frames = frames.slice(start + 1);\n\n    const end = findIndex(frames, function _finderEnd(frame) {\n      return item.source === frame.source;\n    });\n\n    if (end > -1) {\n      frames = frames.slice(0, end);\n    }\n  }\n\n  defContext(context, frames, name);\n\n  return true;\n};\n\n/**\n * The main function for capturing and parsing stacks and setting properties\n * on Custom Error.\n *\n * @private\n * @param {!object} context - The Custom Error this object.\n * @param {string} name - The name of the constructor.\n */\nconst parse = function _parse(context, name) {\n  if (cV8) {\n    defContext(context, cV8(context), name);\n  } else {\n    /** @type {Error} */\n    let err;\n    try {\n      // Error must be thrown to get stack in IE\n      // noinspection ExceptionCaughtLocallyJS,JSValidateTypes\n      throw $Error();\n    } catch (e) {\n      err = e;\n    }\n\n    if (errParse(context, err, name) === false) {\n      let stack = '';\n\n      // If `Error` has a non-standard `stack`, `stacktrace` or\n      // `opera#sourceloc` property that offers a trace of which functions\n      // were called, in what order, from which line and  file, and with what\n      // argument, then we will set it.\n      if (typeof err.stack !== 'undefined') {\n        /* eslint-disable-next-line prefer-destructuring */\n        stack = err.stack;\n      } else {\n        // noinspection JSUnresolvedVariable\n        if (/* eslint-disable-line no-lonely-if */ typeof err.stacktrace !== 'undefined') {\n          // noinspection JSUnresolvedVariable\n          stack = err.stacktrace;\n        } else {\n          const sourceloc = err['opera#sourceloc'];\n\n          if (typeof sourceloc !== 'undefined') {\n            stack = sourceloc;\n          }\n        }\n      }\n\n      defineProperties(context, {\n        frames: {\n          value: [],\n        },\n        stack: {\n          value: stack,\n        },\n      });\n    }\n  }\n};\n\n/**\n * Test whether we have a valid Error constructor.\n *\n * @private\n * @param {*} ErrorCtr - Constructor to test it creates an Error.\n * @returns {boolean} True if ErrorCtr creates an Error, otherwise false.\n */\nconst isErrorCtr = function _isErrorCtr(ErrorCtr) {\n  if (isFunction(ErrorCtr)) {\n    try {\n      return isError(new ErrorCtr({}));\n    } catch (ignore) {\n      // empty\n    }\n  }\n\n  return false;\n};\n\n/**\n * Detect whether we are creating an 'AssertionError' constructor.\n *\n * @private\n * @param {string} name - Name to test if it is 'AssertionError'.\n * @param {OfErrorConstructor} ErrorCtr - Constructor to test it creates ASSERTION$Error.\n * @returns {boolean} True if either arguments asserts, otherwise false.\n */\nconst asAssertionError = function _asAssertionError(name, ErrorCtr) {\n  if (name === 'AssertionError') {\n    return true;\n  }\n\n  if (isErrorCtr(ErrorCtr)) {\n    const err = new ErrorCtr({\n      actual: 'b',\n      expected: 'c',\n      message: 'a',\n      operator: 'd',\n    });\n\n    return (\n      typeof err.name === 'string' && err.message === 'a' && err.actual === 'b' && err.expected === 'c' && err.operator === 'd'\n    );\n  }\n\n  return false;\n};\n\n/**\n * Message generator for AssertionError.\n *\n * @private\n * @param {!object} message - The message object.\n * @returns {string} The generated message.\n */\nconst getMessage = function _getMessage(message) {\n  const opts = {\n    length: message.length ? toLength(message.length) : 128,\n    omission: message.omission ? safeToString(message.omission) : '',\n    separator: message.separator ? safeToString(message.separator) : '',\n  };\n\n  return `${truncate(inspect(message.actual), opts)} ${message.operator} ${truncate(inspect(message.expected), opts)}`;\n};\n\n/**\n * The toJSON method returns an object representation of the Error object.\n *\n * @private\n * @this {!Object} A custom error instance.\n * @returns {object} An object representation.\n */\nconst toJSON = function _toJSON() {\n  return {\n    frames: this.frames,\n    message: this.message,\n    name: this.name,\n    stack: this.stack,\n  };\n};\n\n/**\n * Initialise a new instance of a custom error.\n *\n * @private\n * @param {!object} context - The Custom Error this object.\n * @param {object} message - Human-readable description of the error.\n * @param {string} name - The name for the custom Error.\n * @param {OfErrorConstructor} [ErrorCtr=Error] - Error constructor to be used.\n */\nconst init = function _init(context, message, name, ErrorCtr) {\n  if (asAssertionError(name, ErrorCtr)) {\n    defineProperties(context, {\n      actual: {\n        value: message.actual,\n      },\n      expected: {\n        value: message.expected,\n      },\n      generatedMessage: {\n        value: castBoolean(message.message) === false,\n      },\n      message: {\n        value: message.message ? message.message : getMessage(message),\n      },\n      operator: {\n        value: message.operator,\n      },\n    });\n  } else if (typeof message !== 'undefined') {\n    // Standard Errors. Only set `this.message` if the argument `message`\n    // was not `undefined`.\n    defineProperties(context, {\n      message: {\n        value: safeToString(message),\n      },\n    });\n  }\n\n  // Parse and set the 'this' properties.\n  parse(context, name);\n};\n\n// `init` is used in `eval`, don't delete.\ninit({}, 'message', 'name', $Error);\n\n/**\n * Creates a custom Error constructor. Will use `Error` if argument is not\n * a valid constructor.\n *\n * @function\n * @param {string} [name='Error'] - The name for the custom Error.\n * @param {OfErrorConstructor} [ErrorCtr=Error] - Error constructor to be used.\n * @returns {Function} The custom Error constructor.\n */\nexport const create = function _createErrorCtr(name, ErrorCtr) {\n  let ECTR = ErrorCtr;\n  let customName = isNil(name) ? 'CustomError' : name;\n  /**\n   * Create a new object, that prototypally inherits from the `Error`\n   * constructor.\n   *\n   * @private\n   * @class CstmCtr\n   * @param {string} [message] - Human-readable description of the error.\n   */\n  let CstmCtr;\n\n  if (customName !== 'CustomError') {\n    try {\n      customName = trim(safeToString(customName));\n      /* eslint-disable-next-line no-eval */\n      eval(`(function ${customName} () {})`);\n    } catch (ignore) {\n      customName = 'CustomError';\n    }\n  }\n\n  if (allCtrs === false || isErrorCtr(ECTR) === false) {\n    ECTR = $Error;\n  }\n\n  // noinspection JSUnusedLocalSymbols\n  const f = /* eslint-disable-line no-unused-vars */ function _f(context, message) {\n    const isInstCtr = context instanceof CstmCtr;\n\n    if (isInstCtr === false) {\n      return new CstmCtr(message);\n    }\n\n    init(context, message, customName, ErrorCtr);\n\n    return context;\n  };\n\n  /* eslint-disable-next-line no-eval */\n  CstmCtr = eval(`(0,function ${customName}(message){return f(this,message)})`);\n\n  // Inherit the prototype methods from `ECTR`.\n  CstmCtr.prototype = $create(ECTR.prototype);\n  // noinspection JSValidateTypes\n  defineProperties(\n    CstmCtr.prototype,\n    /** @lends CstmCtr.prototype */ {\n      /**\n       * Specifies the function that created an instance's prototype.\n       *\n       * @class\n       */\n      constructor: {\n        value: CstmCtr,\n      },\n      /**\n       * The name property represents a name for the type of error.\n       *\n       * @default 'Error'\n       * @type {string}\n       */\n      name: {\n        value: customName,\n      },\n      /**\n       * The toJSON method returns a string representation of the Error object.\n       *\n       * @returns {string} A JSON stringified representation.\n       */\n      toJSON: {\n        value: toJSON,\n      },\n    },\n  );\n\n  if ($toStringTag) {\n    /**\n     * Name Symbol.toStringTag.\n     *\n     * @memberof module:error-x.CstmCtr.prototype\n     * @type {string}\n     */\n    defineProperty(CstmCtr.prototype, $toStringTag, {\n      value: '[object Error]',\n    });\n  }\n\n  return CstmCtr;\n};\n\n// Test if we can use more than just the Error constructor.\ntry {\n  allCtrs = create('X', SyntaxError)('x') instanceof SyntaxError;\n} catch (ignore) {\n  allCtrs = false;\n}\n\n/**\n * Error constructor for test and validation frameworks that implement the\n * standardized AssertionError specification.\n *\n * @class\n * @param {object} [message] - Need to document the properties.\n */\nexport const AssertionErrorConstructor = create('AssertionError', Error);\n\n/**\n * The Error constructor creates an error object.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const ErrorConstructor = create('Error', Error);\n\n/**\n * Creates an instance representing an error that occurs regarding the\n * global function eval().\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const EvalErrorConstructor = create('EvalError', EvalError);\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * The InternalError object indicates an error that occurred internally in\n * the JavaScript engine. For example: \"InternalError: too much recursion\".\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const InternalErrorConstructor = create('InternalError', Error);\n\n/**\n * Creates an instance representing an error that occurs when a numeric\n * variable or parameter is outside of its valid range.\n *\n * @class\n * @param {string} - - [message] Human-readable description of the error.\n */\nexport const RangeErrorConstructor = create('RangeError', RangeError);\n\n/**\n * Creates an instance representing an error that occurs when de-referencing\n * an invalid reference.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const ReferenceErrorConstructor = create('ReferenceError', ReferenceError);\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Indicates if the Javascript engine supports subclassing of all Error\n * types. If `true` then all are supported, if `false` (only very old\n * browsers IE6) then only `Error` is supported.\n *\n * @type boolean\n * */\nexport const supportsAllConstructors = allCtrs;\n\n/**\n * Creates an instance representing a syntax error that occurs while parsing\n * code in eval().\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const SyntaxErrorConstructor = create('SyntaxError', SyntaxError);\n\n/**\n * Creates an instance representing an error that occurs when a variable or\n * parameter is not of a valid type.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const TypeErrorConstructor = create('TypeError', TypeError);\n\n/**\n * Creates an instance representing an error that occurs when encodeURI() or\n * decodeURI() are passed invalid parameters.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const URIErrorConstructor = create('URIError', URIError);\n"]}