{"version":3,"sources":["../src/error-x.js"],"names":[],"mappings":"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","file":"error-x.esm.js","sourcesContent":["/*\n * Want to create your own Error objects, this module will allow you to do\n * just that. It ships with all the standard Error objects already created\n * for you. Why? Well, these offer some improvements over the native versions.\n * - They have a `toJSON` method and so they can be serialised.\n * - They have a standardised `stack` property, using\n * [`error-stack-parser`](https://github.com/stacktracejs/error-stack-parser)\n * messages and stacks are parsed and then re-formatted.\n * - They have a `frames` property which is an array of the parsed `stack`\n * message, so you have easy access to the information.\n */\n\nimport hasToStringTag from 'has-to-string-tag-x';\nimport trim from 'trim-x';\nimport safeToString from 'to-string-symbols-supported-x';\nimport StackFrame from 'stackframe';\nimport errorStackParser from 'error-stack-parser';\nimport defineProperty from 'object-define-property-x';\nimport defineProperties from 'object-define-properties-x';\nimport findIndex from 'find-index-x';\nimport isFunction from 'is-function-x';\nimport inspect from 'inspect-x';\nimport $isError from 'is-error-x';\nimport isNil from 'is-nil-x';\nimport $create from 'object-create-x';\nimport isObjectLike from 'is-object-like-x';\nimport map from 'array-map-x';\nimport numberIsNaN from 'is-nan-x';\nimport numberIsFinite from 'is-finite-x';\nimport isVarName from 'is-var-name';\nimport repeat from 'string-repeat-x';\nimport endsWith from 'string-ends-with-x';\nimport toBoolean from 'to-boolean-x';\nimport objectKeys from 'object-keys-x';\nimport every from 'array-every-x';\n\nexport const isError = $isError;\n\nconst mathMax = Math.max;\n\n/**\n * @typedef {ErrorConstructor|TypeErrorConstructor|SyntaxErrorConstructor|URIErrorConstructor|ReferenceErrorConstructor|EvalErrorConstructor|RangeErrorConstructor} OfErrorConstructor\n */\n\nconst EMPTY_STRING = '';\nconst {split, indexOf: stringIndexOf, slice: stringSlice} = EMPTY_STRING;\nconst {pop, join, slice: arraySlice} = [];\n/* eslint-disable-next-line compat/compat */\nconst $toStringTag = hasToStringTag && Symbol.toStringTag;\n\n/** @type {ErrorConstructor} */\nconst $Error = Error;\n/* Capture the function (if any). */\nconst {captureStackTrace, prepareStackTrace} = $Error;\n\nconst kReadableOperator = {\n  deepStrictEqual: 'Expected values to be strictly deep-equal:',\n  strictEqual: 'Expected values to be strictly equal:',\n  strictEqualObject: 'Expected \"actual\" to be reference-equal to \"expected\":',\n  deepEqual: 'Expected values to be loosely deep-equal:',\n  notDeepStrictEqual: 'Expected \"actual\" not to be strictly deep-equal to:',\n  notStrictEqual: 'Expected \"actual\" to be strictly unequal to:',\n  notStrictEqualObject: 'Expected \"actual\" not to be reference-equal to \"expected\":',\n  notDeepEqual: 'Expected \"actual\" not to be loosely deep-equal to:',\n  notIdentical: 'Values identical but not reference-equal:',\n  notDeepEqualUnequal: 'Expected values not to be loosely deep-equal:',\n};\n\n/* Comparing short primitives should just show === / !== instead of using the diff. */\nconst kMaxShortLength = 12;\n\nfunction inspectValue(val) {\n  /*\n   *The util.inspect default values could be changed. This makes sure the\n   * error messages contain the necessary information nevertheless.\n   */\n  return inspect(val, {\n    compact: false,\n    customInspect: false,\n    depth: 1000,\n    maxArrayLength: Infinity,\n    /* Assert compares only enumerable properties (with a few exceptions). */\n    showHidden: false,\n    /* Assert does not detect proxies currently. */\n    showProxy: false,\n    sorted: true,\n    /* Inspect getters as we also check them when comparing entries. */\n    getters: true,\n  });\n}\n\nfunction createErrDiff(obj) {\n  const {actual, expected, operator} = obj;\n  let $operator = operator;\n  let other = EMPTY_STRING;\n  let res = EMPTY_STRING;\n  let end = EMPTY_STRING;\n  let skipped = false;\n  const actualInspected = inspectValue(actual);\n  const actualLines = split.call(actualInspected, '\\n');\n  const expectedLines = split.call(inspectValue(expected), '\\n');\n\n  let i = 0;\n  let indicator = EMPTY_STRING;\n\n  /* In case both values are objects or functions explicitly mark them as not reference equal for the `strictEqual` operator. */\n  if (\n    $operator === 'strictEqual' &&\n    ((typeof actual === 'object' && actual !== null && typeof expected === 'object' && expected !== null) ||\n      (typeof actual === 'function' && typeof expected === 'function'))\n  ) {\n    $operator = 'strictEqualObject';\n  }\n\n  /* If \"actual\" and \"expected\" fit on a single line and they are not strictly equal, check further special handling. */\n  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {\n    const inputLength = actualLines[0].length + expectedLines[0].length;\n\n    /*\n     * If the character length of \"actual\" and \"expected\" together is less than kMaxShortLength and if neither is an object and at\n     * least one of them is not `zero`, use the strict equal comparison to visualize the output.\n     */\n    if (inputLength <= kMaxShortLength) {\n      if (\n        (typeof actual !== 'object' || actual === null) &&\n        (typeof expected !== 'object' || expected === null) &&\n        (actual !== 0 || expected !== 0)\n      ) {\n        /* -0 === +0 */\n        return `${kReadableOperator[$operator]}\\n\\n${actualLines[0]} !== ${expectedLines[0]}\\n`;\n      }\n    } else if ($operator !== 'strictEqualObject') {\n      /*\n       * If the stderr is a tty and the input length is lower than the current columns per line,\n       * add a mismatch indicator below the output. If it is not a tty, use a default value of 80 characters.\n       */\n      const maxLength = 80;\n\n      if (inputLength < maxLength) {\n        while (actualLines[0][i] === expectedLines[0][i]) {\n          i += 1;\n        }\n\n        /* Ignore the first characters. */\n        if (i > 2) {\n          /*\n           * Add position indicator for the first mismatch in case it is a\n           * single line and the input length is less than the column length.\n           */\n          indicator = `\\n  ${repeat(' ', i)}^`;\n          i = 0;\n        }\n      }\n    }\n  }\n\n  /*\n   * Remove all ending lines that match (this optimizes the output for\n   * readability by reducing the number of total changed lines).\n   */\n  let a = actualLines[actualLines.length - 1];\n  let b = expectedLines[expectedLines.length - 1];\n  while (a === b) {\n    if (i < 3) {\n      end = `\\n  ${a}${end}`;\n    } else {\n      other = a;\n    }\n\n    i += 1;\n\n    pop.call(actualLines);\n    pop.call(expectedLines);\n\n    if (actualLines.length === 0 || expectedLines.length === 0) {\n      break;\n    }\n\n    a = actualLines[actualLines.length - 1];\n    b = expectedLines[expectedLines.length - 1];\n  }\n\n  const maxLines = mathMax(actualLines.length, expectedLines.length);\n\n  /*\n   * Strict equal with identical objects that are not identical by reference.\n   * E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })\n   */\n  if (maxLines === 0) {\n    /* We have to get the result again. The lines were all removed before. */\n    const aLines = split.call(actualInspected, '\\n');\n\n    /* Only remove lines in case it makes sense to collapse those. */\n    /* TODO: Accept env to always show the full error. */\n    if (aLines.length > 50) {\n      aLines[46] = '...';\n      while (aLines.length > 47) {\n        pop.call(aLines);\n      }\n    }\n\n    return `${kReadableOperator.notIdentical}\\n\\n${join.call(aLines, '\\n')}\\n`;\n  }\n\n  /* There were at least five identical lines at the end. Mark a couple of skipped. */\n  if (i >= 5) {\n    end = `\\n...${end}`;\n    skipped = true;\n  }\n\n  if (other !== EMPTY_STRING) {\n    end = `\\n  ${other}${end}`;\n    other = EMPTY_STRING;\n  }\n\n  let printedLines = 0;\n  let identical = 0;\n  const msg = `${kReadableOperator[$operator]}\\n+ actual - expected`;\n  const skippedMsg = ' ... Lines skipped';\n\n  let lines = actualLines;\n  let plusMinus = '+';\n  let maxLength = expectedLines.length;\n\n  if (actualLines.length < maxLines) {\n    lines = expectedLines;\n    plusMinus = '-';\n    maxLength = actualLines.length;\n  }\n\n  for (i = 0; i < maxLines; i += 1) {\n    if (maxLength < i + 1) {\n      /* If more than two former lines are identical, print them. Collapse them in case more than five lines were identical. */\n      if (identical > 2) {\n        if (identical > 3) {\n          if (identical > 4) {\n            if (identical === 5) {\n              res += `\\n  ${lines[i - 3]}`;\n              printedLines += 1;\n            } else {\n              res += '\\n...';\n              skipped = true;\n            }\n          }\n\n          res += `\\n  ${lines[i - 2]}`;\n          printedLines += 1;\n        }\n\n        res += `\\n  ${lines[i - 1]}`;\n        printedLines += 1;\n      }\n\n      /* No identical lines before. */\n      identical = 0;\n\n      /* Add the expected line to the cache. */\n      if (lines === actualLines) {\n        res += `\\n${plusMinus} ${lines[i]}`;\n      } else {\n        other += `\\n${plusMinus} ${lines[i]}`;\n      }\n\n      printedLines += 1;\n      /* Only extra actual lines exist. Lines diverge */\n    } else {\n      const expectedLine = expectedLines[i];\n      let actualLine = actualLines[i];\n      /*\n       * If the lines diverge, specifically check for lines that only diverge by a trailing comma.\n       * In that case it is actually identical and we should mark it as such.\n       */\n      let divergingLines =\n        actualLine !== expectedLine && (!endsWith(actualLine, ',') || stringSlice.call(actualLine, 0, -1) !== expectedLine);\n\n      /*\n       * If the expected line has a trailing comma but is otherwise identical, add a comma at the end of the actual line.\n       * Otherwise the output could look weird as in:\n       *\n       * [\n       *   1         // No comma at the end!\n       * +   2\n       * ]\n       */\n      if (divergingLines && endsWith(expectedLine, ',') && stringSlice.call(expectedLine, 0, -1) === actualLine) {\n        divergingLines = false;\n        actualLine += ',';\n      }\n\n      if (divergingLines) {\n        /* If more than two former lines are identical, print them. Collapse them in case more than five lines were identical. */\n        if (identical > 2) {\n          if (identical > 3) {\n            if (identical > 4) {\n              if (identical === 5) {\n                res += `\\n  ${actualLines[i - 3]}`;\n                printedLines += 1;\n              } else {\n                res += '\\n...';\n                skipped = true;\n              }\n            }\n\n            res += `\\n  ${actualLines[i - 2]}`;\n            printedLines += 1;\n          }\n\n          res += `\\n  ${actualLines[i - 1]}`;\n          printedLines += 1;\n        }\n\n        /* No identical lines before. */\n        identical = 0;\n        /*\n         * Add the actual line to the result and cache the expected diverging\n         * line so consecutive diverging lines show up as +++--- and not +-+-+-.\n         */\n        res += `\\n+ ${actualLine}`;\n        other += `\\n- ${expectedLine}`;\n        printedLines += 2;\n        /* Lines are identical */\n      } else {\n        /* Add all cached information to the result before adding other things and reset the cache. */\n        res += other;\n        other = EMPTY_STRING;\n        identical += 1;\n\n        /* The very first identical line since the last diverging line is be added to the result. */\n        if (identical <= 2) {\n          res += `\\n  ${actualLine}`;\n          printedLines += 1;\n        }\n      }\n    }\n\n    /* Inspected object to big (Show ~50 rows max) */\n    if (printedLines > 50 && i < maxLines - 2) {\n      return `${msg}${skippedMsg}\\n${res}\\n...${other}\\n...`;\n    }\n  }\n\n  return `${msg}${skipped ? skippedMsg : EMPTY_STRING}\\n${res}${other}${end}${indicator}`;\n}\n\n/**\n * Tests for number as specified in StackTrace library.\n *\n * @private\n * @param {*} n - The value to test.\n * @returns {boolean} True if parsable, otherwise false.\n */\nconst isNumber = function isNumber(n) {\n  return numberIsNaN(parseFloat(n)) === false && numberIsFinite(n);\n};\n\n/**\n * The stack preparation function for the V8 stack.\n *\n * @private\n * @param {*} ignore - Unused argument.\n * @param {!object} thisStack - The V8 stack.\n * @returns {!object} The V8 stack.\n */\nconst tempPrepareStackTrace = function _prepareStackTrace(ignore, thisStack) {\n  return thisStack;\n};\n\n/**\n * Captures the V8 stack and converts it to an array of Stackframes.\n *\n * @private\n * @function captureV8\n * @param {!object} context - The Custom Error this object.\n * @returns {!Array.<!object>} Array of StackFrames.\n */\nconst captureV8 = function captureV8(context) {\n  $Error.prepareStackTrace = tempPrepareStackTrace;\n\n  /** @type {object} */\n  const error = new $Error();\n  captureStackTrace(error, context.constructor);\n  const frames = map(error.stack, function iteratee(frame) {\n    const opts = {\n      functionName: frame.getFunctionName(),\n      isConstructor: frame.isConstructor(),\n      isEval: frame.isEval(),\n      isNative: frame.isNative(),\n      isToplevel: frame.isToplevel(),\n      source: frame.toString(),\n    };\n\n    const getFileName = isFunction(frame.getFileName) && frame.getFileName();\n\n    if (getFileName) {\n      opts.getFileName = getFileName;\n    }\n\n    const columnNumber = isFunction(frame.getColumnNumber) && frame.getColumnNumber();\n\n    if (isNumber(columnNumber)) {\n      opts.columnNumber = columnNumber;\n    }\n\n    const lineNumber = isFunction(frame.getLineNumber) && frame.getLineNumber();\n\n    if (isNumber(lineNumber)) {\n      opts.lineNumber = lineNumber;\n    }\n\n    const evalOrigin = isFunction(frame.getEvalOrigin) && frame.getEvalOrigin();\n\n    if (isObjectLike(evalOrigin)) {\n      opts.evalOrigin = evalOrigin;\n    }\n\n    return new StackFrame(opts);\n  });\n\n  if (typeof prepareStackTrace === 'undefined') {\n    delete $Error.prepareStackTrace;\n  } else {\n    $Error.prepareStackTrace = prepareStackTrace;\n  }\n\n  return frames;\n};\n\nconst getCV8 = function getCV8() {\n  /* Test to see if the function works. */\n  try {\n    captureStackTrace(new $Error(), captureStackTrace);\n  } catch (ignore) {\n    return false;\n  }\n\n  return captureV8;\n};\n\nconst cV8 = toBoolean(captureStackTrace) && getCV8();\nlet allCtrs = true;\nconst STACK_NEWLINE = '\\n    ';\n\n/**\n * Defines frames and stack on the Custom Error this object.\n *\n * @private\n * @param {!object} obj - The parameters.\n * @property {!object} objcontext - The Custom Error this object.\n * @property {!Array.<!object>} objframes - Array of StackFrames.\n * @property {string} objname - The name of the constructor.\n */\nconst defContext = function defContext(obj) {\n  const {context, frames, name} = obj;\n  defineProperties(context, {\n    frames: {value: frames},\n    stack: {\n      value: `${name}${STACK_NEWLINE}${join.call(\n        map(frames, function iteratee(frame) {\n          return frame.toString();\n        }),\n        STACK_NEWLINE,\n      )}`,\n    },\n  });\n};\n\n/**\n * @private\n * @param {Array} frames - The frames array.\n * @param {number} start - Start from.\n * @returns {Array} - The filtered frames array.\n */\nconst filterFramesErrParse = function filterFramesErrParse(frames, start) {\n  const item = frames[start];\n  const $frames = arraySlice.call(frames, start + 1);\n\n  const end = findIndex($frames, function predicate(frame) {\n    return item.source === frame.source;\n  });\n\n  return end > -1 ? arraySlice.call($frames, 0, end) : $frames;\n};\n\n/**\n * @private\n * @param {Error} err - The error object.\n * @returns {Array|boolean} - The frames array or false.\n */\nconst getErrParseFrames = function getErrParseFrames(err) {\n  try {\n    return errorStackParser.parse(err);\n  } catch (ignore) {\n    return false;\n  }\n};\n\n/**\n * Captures the other stacks and converts them to an array of Stackframes.\n *\n * @private\n * @param {!object} obj - The parameters.\n * @property {!object} obj.context - The Custom Error this object.\n * @property {!Error} obj.err - The Error object to be parsed.\n * @property {string} obj.name - The name of the constructor.\n * @returns {boolean} True if the Error object was parsed, otherwise false.\n */\nconst errParse = function errParse(obj) {\n  const {context, err, name} = obj;\n  let frames = getErrParseFrames(err);\n\n  if (frames === false) {\n    return false;\n  }\n\n  const start = findIndex(frames, function predicate(frame) {\n    const fName = typeof frame.functionName === 'string' ? frame.functionName : EMPTY_STRING;\n\n    return stringIndexOf.call(fName, name) > -1;\n  });\n\n  if (start > -1) {\n    frames = filterFramesErrParse(frames, start);\n  }\n\n  defContext({context, frames, name});\n\n  return true;\n};\n\n/**\n * Error must be thrown to get stack in IE.\n *\n * @private\n * @returns {Error} - The thrown error.\n */\nconst getParseStackError = function getParseStackError() {\n  try {\n    // noinspection ExceptionCaughtLocallyJS,JSValidateTypes\n    throw $Error();\n  } catch (e) {\n    return e;\n  }\n};\n\n/**\n * If `Error` has a non-standard `stack`, `stacktrace` or `opera#sourceloc` property that offers a trace of which functions\n * were called, in what order, from which line and  file, and with what argument, then we will set it.\n *\n * @private\n * @param {Error} err - - The error object.\n * @returns {string} - The stack string.\n */\nconst getParseStackStack = function getParseStackStack(err) {\n  if (typeof err.stack !== 'undefined') {\n    return err.stack;\n  }\n\n  // noinspection JSUnresolvedVariable\n  if (typeof err.stacktrace !== 'undefined') {\n    // noinspection JSUnresolvedVariable\n    return err.stacktrace;\n  }\n\n  const sourceloc = err['opera#sourceloc'];\n\n  if (typeof sourceloc !== 'undefined') {\n    return sourceloc;\n  }\n\n  return EMPTY_STRING;\n};\n\n/**\n * The main function for capturing and parsing stacks and setting properties\n * on Custom Error.\n *\n * @private\n * @param {!object} context - The Custom Error this object.\n * @param {string} name - The name of the constructor.\n * @returns {!object} - The context.\n */\nconst parseStack = function parseStack(context, name) {\n  if (cV8) {\n    defContext({context, frames: cV8(context), name});\n  } else {\n    const err = getParseStackError();\n\n    if (errParse({context, err, name}) === false) {\n      defineProperties(context, {\n        frames: {value: []},\n        stack: {value: getParseStackStack(err)},\n      });\n    }\n  }\n\n  return context;\n};\n\n/**\n * Test whether we have a valid Error constructor.\n *\n * @private\n * @param {*} ErrorCtr - Constructor to test it creates an Error.\n * @returns {boolean} True if ErrorCtr creates an Error, otherwise false.\n */\nconst isErrorCtr = function isErrorCtr(ErrorCtr) {\n  if (isFunction(ErrorCtr)) {\n    try {\n      return isError(new ErrorCtr({}));\n    } catch (ignore) {\n      // empty\n    }\n  }\n\n  return false;\n};\n\n/**\n * Detect whether we are creating an 'AssertionError' constructor.\n *\n * @private\n * @param {string} name - Name to test if it is 'AssertionError'.\n * @param {OfErrorConstructor} ErrorCtr - Constructor to test it creates ASSERTION$Error.\n * @returns {boolean} True if either arguments asserts, otherwise false.\n */\nconst asAssertionError = function asAssertionError(name, ErrorCtr) {\n  if (name === 'AssertionError') {\n    return true;\n  }\n\n  if (isErrorCtr(ErrorCtr)) {\n    const testObject = {actual: 'b', expected: 'c', message: 'a', operator: 'd'};\n    const err = new ErrorCtr(testObject);\n\n    return every(objectKeys(testObject), function predicate(key) {\n      return err[key] === testObject[key];\n    });\n  }\n\n  return false;\n};\n\n/**\n * Message generator for AssertionError.\n *\n * @private\n * @param {!object} message - The message object.\n * @returns {string} The generated message.\n */\nconst getMessage = function getMessage(message) {\n  if (message.operator === 'deepStrictEqual' || message.operator === 'strictEqual') {\n    const {actual, expected, operator} = message;\n\n    return createErrDiff({actual, expected, operator});\n  }\n\n  if (message.operator === 'notDeepStrictEqual' || message.operator === 'notStrictEqual') {\n    /* In case the objects are equal but the operator requires unequal, show the first object and say A equals B. */\n    let base = kReadableOperator[message.operator];\n    const res = split.call(inspectValue(message.actual), '\\n');\n\n    /* In case \"actual\" is an object or a function, it should not be reference equal. */\n    if (\n      message.operator === 'notStrictEqual' &&\n      ((typeof message.actual === 'object' && message.actual !== null) || typeof actual === 'function')\n    ) {\n      base = kReadableOperator.notStrictEqualObject;\n    }\n\n    /* Only remove lines in case it makes sense to collapse those. */\n    /* TODO: Accept env to always show the full error. */\n    if (res.length > 50) {\n      res[46] = '...';\n      while (res.length > 47) {\n        pop.call(res);\n      }\n    }\n\n    /* Only print a single input. */\n    if (res.length === 1) {\n      return `${base}${res[0].length > 5 ? '\\n\\n' : ' '}${res[0]}`;\n    }\n\n    return `${base}\\n\\n${join.call(res, '\\n')}\\n`;\n  }\n\n  let res = inspectValue(message.actual);\n  let other = inspectValue(message.expected);\n  const knownOperator = kReadableOperator[message.operator];\n\n  if (message.operator === 'notDeepEqual' && res === other) {\n    res = `${knownOperator}\\n\\n${res}`;\n\n    if (res.length > 1024) {\n      res = `${stringSlice.call(res, 0, 1021)}...`;\n    }\n\n    return res;\n  }\n\n  if (res.length > 512) {\n    res = `${stringSlice.call(res, 0, 509)}...`;\n  }\n\n  if (other.length > 512) {\n    other = `${stringSlice.call(other, 0, 509)}...`;\n  }\n\n  if (message.operator === 'deepEqual') {\n    res = `${knownOperator}\\n\\n${res}\\n\\nshould loosely deep-equal\\n\\n`;\n  } else {\n    const newOp = kReadableOperator[`${message.operator}Unequal`];\n\n    if (newOp) {\n      res = `${newOp}\\n\\n${res}\\n\\nshould not loosely deep-equal\\n\\n`;\n    } else {\n      other = ` ${message.operator} ${other}`;\n    }\n  }\n\n  return `${res}${other}`;\n};\n\n/**\n * The toJSON method returns an object representation of the Error object.\n *\n * @private\n * @this {!Object} A custom error instance.\n * @returns {object} An object representation.\n */\nconst toJSON = function toJSON() {\n  return {\n    frames: this.frames,\n    message: this.message,\n    name: this.name,\n    stack: this.stack,\n  };\n};\n\nconst defineAssertionErrorProps = function defineAssertionErrorProps(context, message) {\n  if (typeof message !== 'object' || message === null) {\n    throw new TypeError(`The \"options\" argument must be of type Object. Received type ${typeof message}`);\n  }\n\n  defineProperties(context, {\n    actual: {value: message.actual},\n    code: {value: 'ERR_ASSERTION'},\n    expected: {value: message.expected},\n    generatedMessage: {value: toBoolean(message.message) === false},\n    message: {value: message.message || getMessage(message)},\n    operator: {value: message.operator},\n  });\n\n  return context;\n};\n\n/**\n * Initialise a new instance of a custom error.\n *\n * @private\n * @param {!object} obj - The parameters.\n * @property {!object} obj.context - The Custom Error this object.\n * @property {object} obj.message - Human-readable description of the error.\n * @property {string} obj.name - The name for the custom Error.\n * @property {OfErrorConstructor} [obj.ErrorCtr=Error] - Error constructor to be used.\n * @returns {!object} - The context;.\n */\nconst init = function init(obj) {\n  const {context, message, name, ErrorCtr} = obj;\n\n  if (asAssertionError(name, ErrorCtr)) {\n    defineAssertionErrorProps(context, message);\n  } else if (typeof message !== 'undefined') {\n    /* Standard Errors. Only set `this.message` if the argument `message` was not `undefined`. */\n    defineProperties(context, {\n      message: {\n        value: safeToString(message),\n      },\n    });\n  }\n\n  /* Parse and set the 'this' properties. */\n  return parseStack(context, name);\n};\n\n/* `init` is used in `eval`, don't delete. */\ninit({context: {}, message: 'message', name: 'name', ErrorCtr: $Error});\n\n/* eslint-disable-next-line no-void */\nlet AssertionError = void 0;\n\nconst CUSTOM_NAME = 'CustomError';\n\nconst assignCtrMethods = function assignCtrMethods(obj) {\n  const {CstmCtr, customName, nativeToString} = obj;\n  // noinspection JSValidateTypes\n  defineProperties(\n    CstmCtr.prototype,\n    /** @lends CstmCtr.prototype */ {\n      /**\n       * Specifies the function that created an instance's prototype.\n       *\n       * @class\n       */\n      constructor: {\n        value: CstmCtr,\n      },\n      /**\n       * The name property represents a name for the type of error.\n       *\n       * @default 'Error'\n       * @type {string}\n       */\n      name: {\n        value: customName,\n      },\n      /**\n       * The toJSON method returns a string representation of the Error object.\n       *\n       * @returns {string} A JSON stringified representation.\n       */\n      toJSON: {\n        value: toJSON,\n      },\n      toString: {\n        value: function $toString() {\n          return this instanceof AssertionError ? `${this.name} [${this.code}]: ${this.message}` : nativeToString.call(this);\n        },\n      },\n    },\n  );\n\n  if ($toStringTag) {\n    /**\n     * Name Symbol.toStringTag.\n     *\n     * @memberof CstmCtr.prototype\n     * @type {string}\n     */\n    defineProperty(CstmCtr.prototype, $toStringTag, {\n      value: '[object Error]',\n    });\n  }\n\n  return CstmCtr;\n};\n\n/**\n * @param {*} name - The supplied name.\n * @returns {string} - The custom name.\n */\nconst getCustomName = function getCustomName(name) {\n  const initialName = isNil(name) ? CUSTOM_NAME : trim(safeToString(name));\n\n  return initialName === CUSTOM_NAME || isVarName(initialName) ? initialName : CUSTOM_NAME;\n};\n\n/**\n * Creates a custom Error constructor. Will use `Error` if argument is not a valid constructor.\n *\n * @function\n * @param {string} [name='Error'] - The name for the custom Error.\n * @param {OfErrorConstructor} [ErrorCtr=Error] - Error constructor to be used.\n * @returns {Function} The custom Error constructor.\n */\nconst createErrorCtr = function createErrorCtr(name, ErrorCtr) {\n  const ECTR = allCtrs === false || isErrorCtr(ErrorCtr) === false ? $Error : ErrorCtr;\n  const customName = getCustomName(name);\n\n  /**\n   * Create a new object, that prototypically inherits from the `Error`\n   * constructor.\n   *\n   * @private\n   * @class CstmCtr\n   * @param {string} [message] - Human-readable description of the error.\n   */\n  let CstmCtr;\n\n  // noinspection JSUnusedLocalSymbols\n  const f = function f(context, message) {\n    return context instanceof CstmCtr ? init({context, message, name: customName, ErrorCtr}) : new CstmCtr(message);\n  };\n\n  /* eslint-disable-next-line no-new-func */\n  CstmCtr = Function('f', `return function ${customName}(message){return f(this,message)}`)(f);\n  /* Inherit the prototype methods from `ECTR`. */\n  CstmCtr.prototype = $create(ECTR.prototype);\n\n  return assignCtrMethods({CstmCtr, customName, nativeToString: ECTR.prototype.toString});\n};\n\nexport const create = createErrorCtr;\n\n/* Test if we can use more than just the Error constructor. */\ntry {\n  allCtrs = createErrorCtr('X', SyntaxError)('x') instanceof SyntaxError;\n} catch (ignore) {\n  allCtrs = false;\n}\n\n/**\n * Error constructor for test and validation frameworks that implement the\n * standardized AssertionError specification.\n *\n * @class\n * @param {object} [message] - Need to document the properties.\n */\nexport const AssertionErrorConstructor = createErrorCtr('AssertionError', Error);\n\nAssertionError = AssertionErrorConstructor;\n\n/**\n * The Error constructor creates an error object.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const ErrorConstructor = createErrorCtr('Error', Error);\n\n/**\n * Creates an instance representing an error that occurs regarding the\n * global function eval().\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const EvalErrorConstructor = createErrorCtr('EvalError', EvalError);\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * The InternalError object indicates an error that occurred internally in\n * the JavaScript engine. For example: \"InternalError: too much recursion\".\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const InternalErrorConstructor = createErrorCtr('InternalError', Error);\n\n/**\n * Creates an instance representing an error that occurs when a numeric\n * variable or parameter is outside of its valid range.\n *\n * @class\n * @param {string} - - [message] Human-readable description of the error.\n */\nexport const RangeErrorConstructor = createErrorCtr('RangeError', RangeError);\n\n/**\n * Creates an instance representing an error that occurs when de-referencing\n * an invalid reference.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const ReferenceErrorConstructor = createErrorCtr('ReferenceError', ReferenceError);\n\n// noinspection JSUnusedGlobalSymbols\n/**\n * Indicates if the Javascript engine supports subclassing of all Error\n * types. If `true` then all are supported, if `false` (only very old\n * browsers IE6) then only `Error` is supported.\n *\n * @type boolean\n * */\nexport const supportsAllConstructors = allCtrs;\n\n/**\n * Creates an instance representing a syntax error that occurs while parsing\n * code in eval().\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const SyntaxErrorConstructor = createErrorCtr('SyntaxError', SyntaxError);\n\n/**\n * Creates an instance representing an error that occurs when a variable or\n * parameter is not of a valid type.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const TypeErrorConstructor = createErrorCtr('TypeError', TypeError);\n\n/**\n * Creates an instance representing an error that occurs when encodeURI() or\n * decodeURI() are passed invalid parameters.\n *\n * @class\n * @param {string} [message] - Human-readable description of the error.\n */\nexport const URIErrorConstructor = createErrorCtr('URIError', URIError);\n"]}